#!/usr/bin/env node

var shell = require("shelljs");
var exec = shell.exec;

var argv = process.argv.slice(1)
  , componentHelperDir = findComponentHelper()
  , version = require("../package.json").version
  , fs = require("fs")
  , replaceStream = require('replacestream')
  , prompt = require("prompt");

function findComponentHelper() {
  return exec('npm config get prefix', {silent:true}).output.replace(/\s+$/g, '') + "/lib/node_modules/gulp-component-helper";
}

var commands = {
  new: function(argv) {
    console.log("Creating your component...");
    prompt.start();
    prompt.get([{
        description: 'Component Name',
        name: 'name'
      }, {
        description: 'Github Repository URL',
        name: 'remote'
    }], function(err, result) {
      fs.mkdirSync(result.name);
    [ "/gulpfile.js",
      "/package.json" ].forEach(function(file) {
        fs.createReadStream(componentHelperDir + "/component-structure" + file)
          .pipe(replaceStream('{{ component }}', result.name))
          .pipe(replaceStream('{{ git.username }}', result.remote.match(/.com\:(.*)\//)[1]))
          .pipe(replaceStream('{{ git.author }}', exec('git config user.name', {silent:true}).output.replace(/\s+$/g, '')))
          .pipe(fs.createWriteStream(result.name + file));
        });
      shell.cd(result.name);
      console.log("\nInitialising git...\n");
      exec("git init && git remote add origin "+result.remote, function() {
        console.log("\nInstalling NPM Dependencies...\n");
        exec("npm install", function() {
          console.log("\nInstalling Component...\n");
          exec("gulp init:component");
        });
      });
    });
  },
  help: function help () {
    console.log([ "Commands: new, help, version",
                  "Usage: component new",
                ].join("\n"));
  },
  version: function() {
    console.log(version);
  }
};

(function main() {
  if (!argv.length) return commands.help();
  var cwd =  argv.shift();
  var command = argv.shift();
  commands[command] && commands[command](argv);
  !commands[command] && commands.help();
})();

