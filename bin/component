#!/usr/bin/env node

var findup = require('findup-sync');
var fs = require("fs")
var prompt = require("prompt");
var chalk = require('chalk');
var shell = require("shelljs");
var exec = shell.exec;
var minimist = require('minimist');
var knownArgs = {
    string: 'version',
    default: { version: 'patch' }
};
var flags = minimist(process.argv.slice(2), knownArgs);

function warn(message){
    console.log(chalk.cyan(message.message || 'Error : ' + message));
}

function errorAndExit(message){
    console.log(chalk.red(message.message || 'Error : ' + message));
    process.exit(1);
}

function success(message){
    if (!message || typeof message !== 'string') return
    console.log(chalk.green(message));
}

function npmGlobalPath() {
    return exec('npm config get prefix', {silent:true}).output.replace(/\s+$/g, '') + "/lib/node_modules" ;
}

function execTask(task, args){
    var config = findup('component.config.js');
    if (!config){
        warn('Config is missing, using default')
    }
    var helper = require("../");
    var command = args.shift() || 'all';
    helper[task][command] && helper[task][command](args, flags.version).then(success, errorAndExit);
    !helper[task][command] && help(helper[task], task);
}

function help(task, taskStr){
    var args = [];
    for (var arg in task){
        if (arg!=='all') args.push(arg)
    }
    var helpStr = (taskStr === '') ? '' : '`component ' + taskStr + '` or '
    console.log([ taskStr + " arguments: " + args.join(', '),
        "Usage: " + helpStr + "`component " + taskStr + " " + args[0] + "`"].join("\n"))
}

var commands = {
    new: function() {
        var init = require("../tasks/initialise");
        console.log("Creating your component...");
        prompt.start();
        prompt.get([{
            description: 'Component Name',
            name: 'name'
          }, {
            description: 'Github Repository URL',
            name: 'repo'
        }], function(err, result) {
          if (!result) return;
          var component = result.name;
          var gitUrlMatch = result.repo.match(/.com\:(.*)\//);
          var author = exec('git config user.name', {silent:true}).output.replace(/\s+$/g, '');
          var moduleDir = npmGlobalPath() + '/component-helper/component-structure';
          if (!gitUrlMatch){
            errorAndExit('Github Repository URL must be a url');
          }
          if (fs.existsSync(component)){
            errorAndExit('Component `' + component + '` already exists');
          }
          if (component.indexOf(' ')>-1){
            errorAndExit('Component `' + component + '` must not contain spaces');
          }
          init.component(moduleDir, component, result.repo, author);
        });
    },
    build: function(args){
        execTask('build', args)
    },
    serve: function(args){
        execTask('serve', args)
    },
    test: function(args){
        execTask('test', args)
    },
    release: function(args){
        execTask('release', args)
    },
    '--help': function() {
        help(commands, '')
    },
    '--version': function() {
        var pkg = require("../package.json")
        var version = pkg.version;
        console.log(version);
    }
};

(function main() {
  var argv = process.argv.slice(1)
  if (!argv.length) return commands['--help']();
  var cwd =  argv.shift();
  var command = argv.shift();
  commands[command] && commands[command](argv);
  !commands[command] && commands['--help']();
})();


/*
TODO: trasnfer repo
 */
//gulp.task('transfer:user', function() {
//    if (!gulp.env.oldUser || !gulp.env.newUser){
//        onError('You must give `old-user` and `new-user` arguments i.e,\n'+
//        '`gulp rename-user --old-user=someone --new-user=someone-else`');
//    }
//    return file.replace('./*', {replace: gulp.env.oldUser, with : gulp.env.newUser})
//});