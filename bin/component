#!/usr/bin/env node
var log = require("../tasks/utils/log");
var minimist = require('minimist');
var knownArgs = {
    string: 'version',
    default: { version: 'patch' }
};
var flags = minimist(process.argv.slice(2), knownArgs);

function execTask(task, args){
    var helper = require("../");
    var command = args.shift() || 'all';
    helper[task][command] && helper[task][command](args, flags.version).then(log.onSuccess, log.onError);
    !helper[task][command] && help(helper[task], task);
}

function help(task, taskStr){
    var args = [];
    for (var arg in task){
        if (arg!=='all') args.push(arg)
    }
    var helpStr = (taskStr === '') ? '' : '`component ' + taskStr + '` or '
    console.log([ taskStr + " arguments: " + args.join(', '),
        "Usage: " + helpStr + "`component " + taskStr + " " + args[0] + "`"].join("\n"))
}

var commands = {
    new: function(args) {
        var helper = require("../tasks/new");
        var command = args.shift() || 'all';

        helper[command] && helper[command](args, flags.version).then(log.onSuccess, log.onError);
        !helper[command] && help(helper, 'new');
    },
    build: function(args){
        execTask('build', args)
    },
    serve: function(args){
        execTask('serve', args)
    },
    test: function(args){
        execTask('test', args)
    },
    release: function(args){
        execTask('release', args)
    },
    '--help': function() {
        help(commands, '')
    },
    '--version': function() {
        var pkg = require("../package.json")
        var version = pkg.version;
        console.log(version);
    }
};

(function main() {
  var argv = process.argv.slice(1)
  if (!argv.length) return commands['--help']();
  var cwd =  argv.shift();
  var command = argv.shift();
    if (argv.length && argv[0].indexOf('--') === 0){
        argv=[]
    }
  commands[command] && commands[command](argv);
  !commands[command] && commands['--help']();
})();


/*
TODO: trasnfer repo
 */
//gulp.task('transfer:user', function() {
//    if (!gulp.env.oldUser || !gulp.env.newUser){
//        onError('You must give `old-user` and `new-user` arguments i.e,\n'+
//        '`gulp rename-user --old-user=someone --new-user=someone-else`');
//    }
//    return file.replace('./*', {replace: gulp.env.oldUser, with : gulp.env.newUser})
//});