#!/usr/bin/env node

var argv = process.argv.slice(1)
  , fs = require("fs")
  , prompt = require("prompt");
var shell = require("shelljs");
var exec = shell.exec;
var pkg = require("../package.json")
    , version = pkg.version;

var init = require("../tasks/initialise");

function errorAnExit(message){
  console.log('Error: ' + message);
  process.exit(1);
}

function npmGlobalPath() {
    return exec('npm config get prefix', {silent:true}).output.replace(/\s+$/g, '') + "/lib/node_modules" ;
}

var commands = {
  new: function() {
    console.log("Creating your component...");
    prompt.start();
    prompt.get([{
        description: 'Component Name',
        name: 'name'
      }, {
        description: 'Github Repository URL',
        name: 'repo'
    }], function(err, result) {
      if (!result) return;
      var component = result.name;
      var gitUrlMatch = result.repo.match(/.com\:(.*)\//);
      var author = exec('git config user.name', {silent:true}).output.replace(/\s+$/g, '');
      var moduleDir = npmGlobalPath() + '/gulp-component-helper/component-structure';
      if (!gitUrlMatch){
        errorAnExit('Github Repository URL must be a url');
      }
      if (fs.existsSync(component)){
        errorAnExit('Component `' + component + '` already exists');
      }
      if (component.indexOf(' ')>-1){
        errorAnExit('Component `' + component + '` must not contain spaces');
      }
      init.component(moduleDir, component, result.repo, author);
    });
  },
  help: function help () {
    console.log([ "Commands: new, help, version",
                  "Usage: component new",
                ].join("\n"));
  },
  version: function() {
    console.log(version);
  }
};

(function main() {
  if (!argv.length) return commands.help();
  var cwd =  argv.shift();
  var command = argv.shift();
  commands[command] && commands[command](argv);
  !commands[command] && commands.help();
})();

