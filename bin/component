#!/usr/bin/env node
var log = require("../tasks/utils/log");
var helper = require("../tasks/utils/config-helper");

function execTask(taskName, args){
    helper.configCheck();
    var task = require("../tasks/" + taskName);
    var command = args.shift() || 'run';
    args = (args.length<2) ? args[0] : args;
    if (task[command]){
        task[command](args);
    } else if (task['adhoc']){
        task['adhoc'](command);
    } else {
        help(task, taskName);
    }
}

function help(task, taskName){
    var args = [];
    for (var arg in task){
        if (arg!=='run' && arg!=='adhoc') args.push(arg);
    }
    var helpStr = (taskName === '') ? '' : '`component ' + taskName + '` or ';
    log.info([ taskName + " arguments: " + args.join(', '),
        "Usage: " + helpStr + "`component " + taskName + " " + args[0] + "`"].join("\n"));
}

var commands = {
    new: function(args) {
        var createNewComponent = require("../tasks/new");
        var componentName = args.shift() || log.onError('Please choose a project name as an argument');
        createNewComponent(componentName).then(log.onSuccess, log.onError);
    },
    build: function(args){
        execTask('build', args)
    },
    init: function(args){
        execTask('init', args)
    },
    serve: function(args){
        execTask('serve', args)
    },
    test: function(args){
        execTask('test', args)
    },
    bump: function(args){
        execTask('bump', args)
    },
    release: function(args){
        execTask('release', args)
    },
    clean: function(args){
        execTask('clean', args)
    },
    '--help': function() {
        help(commands, '')
    },
    '--version': function() {
        var pkg = require("../package.json");
        log.info(pkg.version);
    }
};

(function main() {
    var argv = process.argv.slice(1)
    if (!argv.length) return commands['--help']();
    var cwd =  argv.shift();
    var command = argv.shift();
    if (argv.length && argv[0].indexOf('--') === 0){
        argv=[]
    }
    commands[command] && commands[command](argv);
    !commands[command] && commands['--help']();
})();


/*
TODO: trasnfer repo
 */
//gulp.task('transfer:user', function() {
//    if (!gulp.env.oldUser || !gulp.env.newUser){
//        onError('You must give `old-user` and `new-user` arguments i.e,\n'+
//        '`gulp rename-user --old-user=someone --new-user=someone-else`');
//    }
//    return file.replace('./*', {replace: gulp.env.oldUser, with : gulp.env.newUser})
//});